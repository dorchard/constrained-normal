data NA :: (* -> Constraint) -> (* -> * -> *) -> * -> * -> * where
    Unit :: NA c a x x
    Comp :: c y => NA c a y z -> a x y -> NA c a x z 

liftNA :: (c y) => a x y -> NA c a x y
liftNA f = Comp Unit f

lowerNA :: forall x a c z . a z z -> (forall x y . c y => a y z -> a x y -> a x z) -> NA c a x z -> a x z
lowerNA unit comp = lowerNA' where lowerNA' :: forall y . NA c a y z -> a y z
                                   lowerNA' Unit       = unit
                                   lowerNA' (Comp g f) = comp (lowerNA' g) f