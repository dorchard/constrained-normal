{-# LANGUAGE InstanceSigs, KindSignatures, GADTs, RankNTypes, ConstraintKinds, ScopedTypeVariables, FlexibleInstances #-}

module Control.Category.ConstrainedNormal 
    (NC(..), liftNC 

data NC :: (* -> Constraint) -> (* -> * -> *) -> * -> * -> * where
    Unit :: NA c a x x
    Comp :: c y => NC c a y z -> a x y -> NC c a x z 

liftNC :: (c y) => a x y -> NC c a x y
liftNC f = Comp Unit f

lowerNC :: forall x a c z . a z z -> (forall x y . c y => a y z -> a x y -> a x z) -> NC c a x z -> a x z
lowerNC unit comp = lowerNA' where lowerNA' :: forall y . NC c a y z -> a y z
                                   lowerNA' Unit       = unit
                                   lowerNA' (Comp g f) = comp (lowerNA' g) f